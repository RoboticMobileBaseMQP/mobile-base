<launch>
  <arg name="start_gazebo" default="true"/>
  <arg name="gazebo_gui"   default ="true"/>
  <arg name="start_rviz" default="true"/>

	<include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="worlds/empty_world.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="paused" value="true"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <group ns="base">
      <!-- Convert xacro and put on parameter server -->
    <param name="base_description" command="$(find xacro)/xacro $(find mobile_base_description)/urdf/base/model.xacro" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    <!-- SPAWN BASE CONTROLLERS-->
    
    <!-- Spawn the base into Gazebo -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param base_description -urdf -model mobile_base" />

  </group>

  <!-- Delay before homing the arm -->
  <arg name="start_delay_seconds" default="10"/>

  <!-- Initial position in Gazebo -->
  <arg name="x0" default="2"/>
  <arg name="y0" default="2"/>
  <arg name="z0" default="0"/>

  <!-- Arm type -->
  <arg name="arm" default="gen3"/>
  <arg name="dof" default="7"/> <!-- Number of degrees of freedom of the arm -->
  <arg name="gripper" default="" if="$(eval arg('arm') == 'gen3')"/>
  
  <arg name="prefix" default=""/>
  <arg name="robot_name" default="my_$(arg arm)"/> <!-- DO NOT CHANGE THIS-->
  <arg name="cyclic_data_publish_rate" default="40"/> <!--Hz-->
      <param name="robot_description" command="$(find xacro)/xacro --inorder $(find kortex_description)/robots/$(arg arm).xacro dof:=$(arg dof) sim:=true prefix:=$(arg prefix)" />


  <group ns="$(arg robot_name)">

    <!-- Load arm description-->

    <!-- Spawn arm with specific joint values-->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -param robot_description -model $(arg robot_name) -x $(arg x0) -y $(arg y0) -z $(arg z0)
        -robot_namespace $(arg robot_name)
        -J $(arg prefix)joint_1 1.57
        -J $(arg prefix)joint_2 0.35
        -J $(arg prefix)joint_3 3.14
        -J $(arg prefix)joint_4 -2.00
        -J $(arg prefix)joint_5 0
        -J $(arg prefix)joint_6 -1.00
        -J $(arg prefix)joint_7 1.57" />

    <!-- Load controller configuration file from kortex_control package -->
    <rosparam file="$(find kortex_control)/arms/$(arg arm)/$(arg dof)dof/config/joint_position_controllers.yaml" command="load" subst_value="true"/>

    <!-- Start the trajectory controllers -->
    <node name="$(arg prefix)$(arg arm)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="$(arg prefix)$(arg arm)_joint_trajectory_controller $(arg prefix)joint_state_controller" />

    <!-- For 7 DOF arms - stop position controllers -->
    <node name="$(arg prefix)$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" if="$(eval arg('dof') == 7)" args=" --stopped
        $(arg prefix)joint_1_position_controller
        $(arg prefix)joint_2_position_controller
        $(arg prefix)joint_3_position_controller
        $(arg prefix)joint_4_position_controller
        $(arg prefix)joint_5_position_controller
        $(arg prefix)joint_6_position_controller
        $(arg prefix)joint_7_position_controller"/>

    <!-- Start simulated Kortex Driver -->
    <node name="$(arg robot_name)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen"> <!--launch-prefix="gdb -ex run args"-->
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg prefix)"/>
        <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/twist_limits.yaml" subst_value="true"/>
    </node>

    <!-- Start robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen" />

    <!-- Start MoveIt main executable -->
    <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_move_it_config/launch/move_group.launch"> 
        <arg name="dof" value="$(arg dof)"/>
        <arg name="prefix" value="$(arg prefix)"/>
    </include>

    <!-- Sleep, then unpause the physics in Gazebo and home the robot -->
    <node name="home_the_arm" pkg="kortex_gazebo" type="home_robot.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg start_delay_seconds); $0 $@'">
        <param name="robot_name" value="$(arg robot_name)"/>
    </node>

    <!-- Test if homing the robot with MoveIt ended correctly -->
    <test test-name="paramtest_gazebo_initialization" pkg="rostest" type="paramtest">
        <param name="param_name_target" value="is_initialized" />
        <param name="param_value_expected" value="true" />
        <param name="wait_time" value="60" />
    </test> 

    <!-- Start RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mobile_base_description)/rviz/separate_models.rviz"/> 

  </group>
</launch>